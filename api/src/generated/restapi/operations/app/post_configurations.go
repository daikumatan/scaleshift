// Code generated by go-swagger; DO NOT EDIT.

package app

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostConfigurationsHandlerFunc turns a function with the right signature into a post configurations handler
type PostConfigurationsHandlerFunc func(PostConfigurationsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostConfigurationsHandlerFunc) Handle(params PostConfigurationsParams) middleware.Responder {
	return fn(params)
}

// PostConfigurationsHandler interface for that can handle valid post configurations params
type PostConfigurationsHandler interface {
	Handle(PostConfigurationsParams) middleware.Responder
}

// NewPostConfigurations creates a new http.Handler for the post configurations operation
func NewPostConfigurations(ctx *middleware.Context, handler PostConfigurationsHandler) *PostConfigurations {
	return &PostConfigurations{Context: ctx, Handler: handler}
}

/*PostConfigurations swagger:route POST /configurations app postConfigurations

set app configurations


*/
type PostConfigurations struct {
	Context *middleware.Context
	Handler PostConfigurationsHandler
}

func (o *PostConfigurations) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostConfigurationsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
