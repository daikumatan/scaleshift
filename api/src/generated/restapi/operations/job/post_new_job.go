// Code generated by go-swagger; DO NOT EDIT.

package job

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
	"github.com/rescale-labs/scaleshift/api/src/auth"
)

// PostNewJobHandlerFunc turns a function with the right signature into a post new job handler
type PostNewJobHandlerFunc func(PostNewJobParams, *auth.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn PostNewJobHandlerFunc) Handle(params PostNewJobParams, principal *auth.Principal) middleware.Responder {
	return fn(params, principal)
}

// PostNewJobHandler interface for that can handle valid post new job params
type PostNewJobHandler interface {
	Handle(PostNewJobParams, *auth.Principal) middleware.Responder
}

// NewPostNewJob creates a new http.Handler for the post new job operation
func NewPostNewJob(ctx *middleware.Context, handler PostNewJobHandler) *PostNewJob {
	return &PostNewJob{Context: ctx, Handler: handler}
}

/*PostNewJob swagger:route POST /jobs job postNewJob

Submit a job with the specified image


*/
type PostNewJob struct {
	Context *middleware.Context
	Handler PostNewJobHandler
}

func (o *PostNewJob) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostNewJobParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *auth.Principal
	if uprinc != nil {
		principal = uprinc.(*auth.Principal) // this is really a auth.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
